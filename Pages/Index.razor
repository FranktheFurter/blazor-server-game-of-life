@page "/"

<PageTitle>Index</PageTitle>

<div>
    <table>

        @for (int i = 0; i < height; i++)
        {
            <tr>
                @for (int j = 0; j < width; j++)
                {

                    @if (grid[i, j])
                    {
                        <td style="@aliveCell"></td>

                    }
                    else
                    {
                        <td style="@deadCell"></td>
                    }

                }
            </tr>
        }

    </table>
</div>
<div class="btn-group py-4 " role="group" aria-label="Basic outlined example">
    <button type="button" class="btn btn-outline-primary" @onclick="start">Start</button>
    <button type="button" class="btn btn-outline-primary" @onclick="pause">Pause</button>
    <button type="button" class="btn btn-outline-primary" @onclick="step">Step</button>
    <button type="button" class="btn btn-outline-primary" @onclick="reset">Reset</button>
</div>
@code {
    //Field of cells
    static int width = 150;
    static int height = 150;
    bool[,] grid = new bool[width, height]; // false = dead, true = alive
    bool isRunning = false;
    static int randomThreshold = 50;

    //Css for cells
    String aliveCell = "background-color: black; width: 5px; height: 5px;";
    String deadCell = "background-color: white; width: 5px; height: 5px;";

    protected override void OnInitialized()
    {
        reset();
    }
    private async void start()
    {

        isRunning = true;
        while (isRunning)
        {
            step();
            StateHasChanged();
            await Task.Delay(200);
        }

    }
    private void pause()
    {
        isRunning = false;
    }
    private void step()
    {
        //create a tmp grid
        bool[,] tmpGrid = new bool[width, height];

        //loop through the grid and Count the number of neighbors for each cell
        for (int i = 0; i < height; i++)
        {
            for (int j = 0; j < width; j++)
            {
                //count the number of alive neighbors
                //warp arround the field using modulo
                int neighbors = 0;
                //top left -1 -1
                if (grid[warp(i - 1, height), warp(j - 1, width)])
                {
                    neighbors++;
                }
                //top middle -1 0
                if (grid[warp(i - 1, height), warp(j - 0, width)])
                {
                    neighbors++;
                }
                //top right -1 +1
                if (grid[warp(i - 1, height), warp(j + 1, width)])
                {
                    neighbors++;
                }

                //middle left 0 -1
                if (grid[warp(i - 0, height), warp(j - 1, width)])
                {
                    neighbors++;
                }
                //middle right 0 +1
                if (grid[warp(i - 0, height), warp(j + 1, width)])
                {
                    neighbors++;
                }
                //bottom left +1 -1
                if (grid[warp(i + 1, height), warp(j - 1, width)])
                {
                    neighbors++;
                }
                //bottom middle +1 0
                if (grid[warp(i + 1, height), warp(j - 0, width)])
                {
                    neighbors++;
                }
                //bottom right +1 +1
                if (grid[warp(i + 1, height), warp(j + 1, width)])
                {
                    neighbors++;
                }

                // Logic
                //Eine tote Zelle mit genau drei lebenden Nachbarn wird in der Folgegeneration neu geboren.
                if (!grid[i, j] && neighbors == 3)
                {
                    tmpGrid[i, j] = true;
                }
                //Lebende Zellen mit weniger als zwei lebenden Nachbarn sterben in der Folgegeneration an Einsamkeit.
                else if (grid[i, j] && neighbors < 2)
                {
                    tmpGrid[i, j] = false;
                }
                //Lebende Zellen mit zwei oder drei lebenden Nachbarn bleiben in der Folgegeneration bestehen.
                else if (grid[i, j] && (neighbors == 2 || neighbors == 3))
                {
                    tmpGrid[i, j] = true;
                }
                //Lebende Zellen mit mehr als drei lebenden Nachbarn sterben in der Folgegeneration an Überpopulation.
                else if (grid[i, j] && neighbors > 3)
                {
                    tmpGrid[i, j] = false;
                }






            }
        }
        //copy the tmp grid to the main grid
        for (int i = 0; i < height; i++)
        {
            for (int j = 0; j < width; j++)
            {
                grid[i, j] = tmpGrid[i, j];
            }
        }

    }
    private int warp(int index, int max)
    {
        if (index < 0)
        {
            return max - 1;
        }
        else if (index > max - 1)
        {
            return 0;
        }
        else
        {
            return index;
        }
    }

    private void reset()
    {
        isRunning = false;
        resetGameField();
    }
    private void resetGameField()
    {
        Random random = new Random();
        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                random.Next(0, 101);
                grid[x, y] = random.Next(0, 101) > randomThreshold;
            }
        }
    }
}